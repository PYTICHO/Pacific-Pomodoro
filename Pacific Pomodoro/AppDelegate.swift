import Cocoa
import UserNotifications

final class AppDelegate: NSObject, NSApplicationDelegate {
    private var statusItem: NSStatusItem!
    private var timer: Timer?
    private var isRunning = false
    private var isWorkPhase = true
    private var timeRemaining: Int = {
        let saved = UserDefaults.standard.integer(forKey: "timeRemaining")
        return saved == 0 ? 30 * 60 : saved
    }()
    
    
    private var selectedSound: String {
        get { UserDefaults.standard.string(forKey: "selectedSound") ?? "Ping" }
        set { UserDefaults.standard.set(newValue, forKey: "selectedSound") }
    }

    private var workDuration: Int {
        get {
            let saved = UserDefaults.standard.integer(forKey: "workDuration")
            return saved == 0 ? 30 * 60 : saved
        }
        set { UserDefaults.standard.set(newValue, forKey: "workDuration") }
    }

    private var workSlider: NSSlider!

    func applicationDidFinishLaunching(_ notification: Notification) {
        statusItem = NSStatusBar.system.statusItem(withLength: NSStatusItem.variableLength)
        statusItem.button?.font = NSFont.monospacedDigitSystemFont(ofSize: 13, weight: .medium)

        constructMenu()
        requestNotificationPermission()

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
        let savedTime = UserDefaults.standard.integer(forKey: "timeRemaining")

        if savedTime > 0 {
            // üîπ –ï—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            timeRemaining = savedTime
            workDuration = savedTime // —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–ª–∞–π–¥–µ—Ä
        } else {
            // üîπ –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ ‚Äî —Å—Ç–∞–≤–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            timeRemaining = workDuration
        }

        updateTitle()
    }


    // MARK: - –ú–µ–Ω—é
    private func constructMenu() {
        let menu = NSMenu()

        menu.addItem(NSMenuItem(title: "Start", action: #selector(startTimer), keyEquivalent: "s"))
        menu.addItem(NSMenuItem(title: "Pause", action: #selector(pauseTimer), keyEquivalent: "p"))
        menu.addItem(NSMenuItem(title: "Reset", action: #selector(resetTimer), keyEquivalent: "r"))
        menu.addItem(NSMenuItem.separator())

        // Work duration label
        let workLabel = NSMenuItem()
        let minutes = workDuration / 60
        if minutes >= 60 {
            let hours = minutes / 60
            let remainingMinutes = minutes % 60
            if remainingMinutes == 0 {
                workLabel.title = "Work duration: \(hours)h"
            } else {
                workLabel.title = "Work duration: \(hours)h \(remainingMinutes)m"
            }
        } else {
            workLabel.title = "Work duration: \(minutes) min"
        }
        menu.addItem(workLabel)

        // –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–∞–π–¥–µ—Ä –¥–ª—è work
        workSlider = makeCenteredSlider(
            value: Double(workDuration / 60),
            min: 1,
            max: 90,
            action: #selector(workSliderChanged)
        )
        let workSliderItem = NSMenuItem()
        workSliderItem.view = workSlider.superview // –ø–æ–º–µ—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
        menu.addItem(workSliderItem)
        
        menu.addItem(NSMenuItem.separator())
        
        // –ó–≤—É–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        let soundLabel = NSMenuItem()
        soundLabel.title = "Notification sound:"
        menu.addItem(soundLabel)

        // –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –∑–≤—É–∫–æ–≤
        let soundMenu = NSMenu()

        // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç "Off" –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
        let soundNames = ["Off", "Ping", "Pop", "Submarine", "Basso", "Tink", "Glass", "Hero"]

        for sound in soundNames {
            let item = NSMenuItem(title: sound, action: #selector(selectSound(_:)), keyEquivalent: "")
            item.target = self
            item.state = (sound == selectedSound) ? .on : .off
            soundMenu.addItem(item)
        }

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–¥–º–µ–Ω—é = —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∑–≤—É–∫
        let soundSubmenuItem = NSMenuItem(title: selectedSound, action: nil, keyEquivalent: "")
        soundSubmenuItem.submenu = soundMenu
        menu.addItem(soundSubmenuItem)
        
        
        // ‚úÖ –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
        menu.addItem(NSMenuItem(title: "Quit", action: #selector(quit), keyEquivalent: "q"))

        statusItem.menu = menu
    }

    // MARK: - –°–ª–∞–π–¥–µ—Ä—ã
    private func makeCenteredSlider(value: Double, min: Double, max: Double, action: Selector) -> NSSlider {
        let slider = NSSlider(value: value, minValue: min, maxValue: max, target: self, action: action)
        slider.isContinuous = true
        slider.controlSize = .small
        slider.frame.size = NSSize(width: 180, height: 18)

        // –î–µ–ª–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
        let container = NSView(frame: NSRect(x: 0, y: 0, width: 220, height: 22))
        slider.frame.origin = CGPoint(x: (container.frame.width - slider.frame.width) / 2, y: 2)
        container.addSubview(slider)

        // –ù–µ–º–Ω–æ–≥–æ —Å–≤–µ—Ç–ª–µ–µ —Ç—Ä–µ–∫, —Ç–µ–º–Ω–µ–µ —Ñ–æ–Ω
        slider.wantsLayer = true
        slider.layer?.cornerRadius = 2
        slider.layer?.backgroundColor = NSColor.clear.cgColor

        return slider
    }

    @objc private func workSliderChanged() {
        let minutes = Int(workSlider.doubleValue)
        workDuration = minutes * 60
        stopAndReset(to: workDuration)
        updateMenuLabels()
    }

    private func updateMenuLabels() {
        guard let menu = statusItem.menu else { return }

        let minutes = workDuration / 60
        let labelText: String

        if minutes >= 60 {
            let hours = minutes / 60
            let remainingMinutes = minutes % 60
            if remainingMinutes == 0 {
                labelText = "Work duration: \(hours)h"
            } else {
                labelText = "Work duration: \(hours)h \(remainingMinutes)m"
            }
        } else {
            labelText = "Work duration: \(minutes) min"
        }

        menu.item(at: 4)?.title = labelText
    }

    // MARK: - –¢–∞–π–º–µ—Ä
    @objc private func startTimer() {
        guard !isRunning else { return }
        isRunning = true
        scheduleTick()
    }

    @objc private func pauseTimer() {
        isRunning = false
        timer?.invalidate()
        timer = nil
    }

    @objc private func resetTimer() {
        stopAndReset(to: workDuration)
    }

    private func stopAndReset(to newValue: Int) {
        isRunning = false
        timer?.invalidate()
        timer = nil
        isWorkPhase = true
        timeRemaining = newValue
        updateTitle()
    }

    private func scheduleTick() {
        timer?.invalidate()
        timer = Timer.scheduledTimer(timeInterval: 1, target: self, selector: #selector(tick), userInfo: nil, repeats: true)
        RunLoop.main.add(timer!, forMode: .common)
    }

    @objc private func selectSound(_ sender: NSMenuItem) {
        // –°–Ω–∏–º–∞–µ–º –≥–∞–ª–æ—á–∫–∏ —Å–æ –≤—Å–µ—Ö –ø—É–Ω–∫—Ç–æ–≤
        if let menu = sender.menu {
            for item in menu.items {
                item.state = .off
            }
        }

        // –°—Ç–∞–≤–∏–º –≥–∞–ª–æ—á–∫—É –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º
        sender.state = .on
        selectedSound = sender.title

        // üîß –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é
        if let parentItem = sender.parent {
            parentItem.title = selectedSound
        }

        // üéµ –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∑–≤—É–∫, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ "Off"
        if selectedSound != "Off" {
            NSSound(named: NSSound.Name(selectedSound))?.play()
        }
    }



    
    @objc private func tick() {
        guard isRunning else { return }

        if timeRemaining > 0 {
            timeRemaining -= 1
            updateTitle()
        } else {
            // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞
            isRunning = false
            timer?.invalidate()
            timer = nil

            // –ó–≤—É–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            if selectedSound != "Off" {
                NSSound(named: NSSound.Name(selectedSound))?.play()
            }


            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            notify(title: "Work session ended", body: "Time to take a break or start again.")

            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            
            if let button = statusItem.button {
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–æ–∫—É—Å –≤ —Å—Ç–∞—Ç—É—Å–±–∞—Ä, —á—Ç–æ–±—ã –º–µ–Ω—é —Å—Ä–∞–∑—É –≤–∏–¥–Ω–æ –±—ã–ª–æ
                button.performClick(nil)
            }
            

            // –°–±—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏
            timeRemaining = workDuration
            updateTitle()
        }
    }

    private func updateTitle() {
        let totalMinutes = timeRemaining / 60
        let seconds = timeRemaining % 60

        // –ï—Å–ª–∏ –±–æ–ª—å—à–µ —á–∞—Å–∞ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "1:05:00", –∏–Ω–∞—á–µ "45:00"
        if totalMinutes >= 60 {
            let hours = totalMinutes / 60
            let minutes = totalMinutes % 60
            statusItem.button?.title = String(format: "%01d:%02d:%02d", hours, minutes, seconds)
        } else {
            statusItem.button?.title = String(format: "%02d:%02d", totalMinutes, seconds)
        }
    }

    // MARK: - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    private func requestNotificationPermission() {
        UNUserNotificationCenter.current().requestAuthorization(options: [.alert, .sound]) { _, _ in }
    }

    private func notify(title: String, body: String) {
        let content = UNMutableNotificationContent()
        content.title = title
        content.body = body
        content.sound = .default
        let request = UNNotificationRequest(identifier: UUID().uuidString, content: content, trigger: nil)
        UNUserNotificationCenter.current().add(request)
    }

    @objc private func quit() {
        NSApplication.shared.terminate(nil)
    }
    
    func applicationWillTerminate(_ notification: Notification) {
        UserDefaults.standard.set(timeRemaining, forKey: "timeRemaining")
    }
}
